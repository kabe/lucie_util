#!/usr/bin/env perl

use strict;
use warnings;

# Debug ?
my $DEBUG = 1;

# config
my $ldb_repos = q|/home/kabe/git/L4|;
my $secret_file = q|~/lucie/env.enc|;
my $cluster_select_sql = q|select name, mgmt_mac, mgmt_netmask, storage_conf_type from host where name>="sheep00" and name<="sheep99"|;
my @exclude_list = qw(sheep02 sheep04 sheep07 sheep23 sheep34 sheep37 sheep46 sheep47);
my $line_tmpl = q|NODENAME --mac MAC|;
my $remote_ldb_repository_type = q|Subversion|;
my $remote_ldb_repository = q|svn+ssh://intri@www.intrigger.jp/home/intri/SVN/L4|;
my $glbl_tmpl = <<'END';
#/bin/sh

./node install-multi \
LINE_TMPLS
--storage-conf STORAGE_CONF \
--netmask INSTALL_NETWORK \
--source-control REMOTE_LDB_REPOSITORY_TYPE \
--ldb-repository REMOTE_LDB_REPOSITORY_LOCATION \
--verbose \
--secret SECRET_FILE
END

# Setup
my $storage_dir = $ldb_repos . q|/lucie/storage|;
my $check_secret_file = 1;
if ($DEBUG) {
  $check_secret_file = 0;
}

# Util
sub get_name_and_mac_addr {
  my $line = shift;
  chomp $line;
  my ($name, $inst_mac, $inst_network, $storage_type) = split(/\|/, $line);
  $inst_mac = undef if $inst_mac eq "";
  $inst_network = undef if $inst_network eq "";
  $storage_type = undef if $storage_type eq "";
  return ($name, $inst_mac, $inst_network, $storage_type);
}

sub sql_cmd {
  my $repos = $ldb_repos;
  my $suf = q|bin/ldb sql|;
  $cluster_select_sql =~ s/'/\\'/;
  my $cmd = qq|$repos/$suf '$cluster_select_sql'|;
}

sub node_lines {
  my $aref = shift;
  my $str = "";
  for my $line (@$aref) {
    $str .= $line;
  }
  return $str;
}

# Check storage.conf's existence and argv's consistency.
# Return "OK" if everything is OK
sub check_storage {
  my $cref = shift; # Reference to the list of the names of storage.conf
  my @s = sort @$cref;
  if (!defined $s[0]) {
    return q|Storage configuration file for some node(s) undefined!|;
  }
  if ($s[0] ne $s[$#s]) {
    return q|Some of the names of storage configuration file differs!|;
  }
  # File existence
  if (! -f qq|$storage_dir/$s[0]|) {
    return qq|Storage configuration file ($storage_dir/$s[0]) not exists!|;
  }
  return (q|OK|, $storage_dir . '/' . $s[0]);
}

sub check_network {
  my $nref = shift;
  my @s = sort @$nref;
  if (!defined $s[0]) {
    return q|Install Network for some node(s) undefined!|;
  }
  if ($s[0] ne $s[$#s]) {
    return q|Some of the install network configuration differs!|;
  }
  return (q|OK|, $s[0]);
}

sub main() {
  my @node_lines = ();
  my @mac_unknown = ();
  my @excluded = ();
  my @storage_list = ();
  my @install_network_list = ();
  my $handle = undef;
  open $handle, sql_cmd() . " | " or die "Can't open L4 pipe";
  for my $line (<$handle>) {
    my $tmp_tmpl = $line_tmpl;
    my ($name, $inst_mac, $inst_network, $storage_type) = get_name_and_mac_addr($line);
    if (grep /$name/, @exclude_list) {
      push @excluded, $name;
      next;
    }
    if (!defined $inst_mac) {
      push @mac_unknown, $name;
      next;
    }
    push @storage_list, $storage_type;
    push @install_network_list, $inst_network;
    $tmp_tmpl =~ s/NODENAME/$name/;
    $tmp_tmpl =~ s/MAC/$inst_mac/;
    $tmp_tmpl = qq|"$tmp_tmpl" \\\n|;
    push @node_lines, $tmp_tmpl;
  }
  close $handle;

  # Check storage.conf's existence
  my ($storage_conf_result, $storage_conf_file_name) = check_storage(\@storage_list);
  if ($storage_conf_result ne q|OK|) {
    print STDERR q|!!! ERROR !!! |, $storage_conf_result, $/;
    return 0;
  }
  # Check install network
  my ($install_network_result, $install_network) = check_network(\@install_network_list);
  if ($install_network_result ne q|OK|) {
    print STDERR q|!!! ERROR !!! |, $install_network_result, $/;
    return 0;
  }
  # Check secret file
  if ($check_secret_file and ! -f $secret_file) {
    print STDERR q|!!! ERROR !!! |, q|Secret file doesn't exist at |, $secret_file, $/;
    return 0;
  }

  # OUTPUT
  my $nl = node_lines(\@node_lines);
  chomp $nl;
  $glbl_tmpl =~ s/LINE_TMPLS/$nl/;
  $glbl_tmpl =~ s/STORAGE_CONF/$storage_conf_file_name/;
  $glbl_tmpl =~ s/INSTALL_NETWORK/$install_network/;
  $glbl_tmpl =~ s/REMOTE_LDB_REPOSITORY_TYPE/$remote_ldb_repository_type/;
  $glbl_tmpl =~ s/REMOTE_LDB_REPOSITORY_LOCATION/$remote_ldb_repository/;
  $glbl_tmpl =~ s/SECRET_FILE/$secret_file/;
  print $glbl_tmpl;

  if (@excluded != 0) {
    print qq|# Excluded List:\n|;
    print qq|# @excluded\n|;
  }
  if (@mac_unknown != 0) {
    print qq|# Unknown List:\n|;
    print qq|# @mac_unknown\n|;
  }

}

main();

