#!/usr/bin/env perl

###################################################################
#                 Lucie Install Script Generator                  #
#                                 Scripted by Tomoya Kabe         #
###################################################################

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;

# Debug flag(global)
my $DEBUG = 0;

###################################################################
#################### CONFIGURATION BEGINS HERE ####################
###################################################################

my $home = $ENV{HOME};
my $default_lucie_wc = qq|$home/lucie|;
my $default_ldb_wc = qq|$home/L4|;
my $default_secret_file = qq|$home/lucie/env.enc|;
my $default_remote_ldb_repository_type = q|Subversion|;
my $default_remote_ldb_repository = q|svn+ssh://intri@www.intrigger.jp/home/intri/SVN/L4|;

###################################################################
##################### CONFIGURATION ENDS HERE #####################
###################################################################

# Templates
my $cluster_select_sql = q|select name, install_mac, install_netmask, install_ipaddr, storage_conf_type, arch from host where name>="START_NODE" and name<="END_NODE"|;
my $line_tmpl = q|NODENAME --mac MAC --storage-conf STORAGE_CONF --ip-address IP_ADDRESS --netmask NETMASK|;
my $glbl_tmpl = <<'END';
#!/bin/sh

# ********************************************************
# **************** Lucie Installer Script ****************
# *** Check if this script is correct on your own risk ***
# ********************************************************

LUCIE_WC/node install-multi \
LINE_TMPLS
--source-control REMOTE_LDB_REPOSITORY_TYPE \
--ldb-repository REMOTE_LDB_REPOSITORY_LOCATION \
--verbose \
-l LINUX_KERNEL \
BREAK_FLAG \
--secret SECRET_FILE
END


# Usage
sub usage {
  print << "EOD";
Usage :
 \$ $0 --start-node S_NODE --end-node E_NODE
    [Options]
    [--db-file DB_FILE] [--secret-file SECRET_FILE]
    [--ldb-wc LDB_WC] [--lucie-wc LUCIE_WC]
    [--exclude EXCLUDE1 EXCLUDE2 ...]
    [--nocheck-secret-file]
    [--nobreak]

  S_NODE :         NODE FROM (e.g. hongo100)
  E_NODE :         NODE TO   (e.g. hongo402)
  EXCLUDEn :       NODEs to be excluded from the range (e.g. hongo105 hongo107)
  DB_FILE :        Database file used by LDB (default: host.db)
  SECRET_FILE :    A file including secret information (default: \$HOME/lucie/env.enc)
  LUCIE_WC :       Location of Lucie (default: \$HOME/lucie)
  LDB_WC :         Location of LDB repository (default: \$HOME/L4)

  Options
    --help : Show this message
    --debug : Print debug message to STDERR
    --nocheck-secret-file : Don't check an existence of secret file
    --nobreak : Don't use --break option for Lucie

Run Example :
 \$ $0 --start-node sheep00 --end-node sheep64 --exclude sheep02 sheep04 sheep07 sheep34 sheep46 sheep47

EOD
}

# Util

sub print_debug_info {
  my $hash = shift;
  my @xluded = @{$hash->{EXCLUDE_LIST}};
  if ($DEBUG) {
    my $debug_str = << "END";
Debug Information
\$home : $home
\$lucie_wc : $hash->{lucie_wc}
\$ldb_wc : $hash->{ldb_wc}
\$secret_file : $hash->{secret_file}
\$remote_ldb_repository_type : $hash->{remote_ldb_repository_type}
\$remote_ldb_repository : $hash->{remote_ldb_repository}
\$cluster_select_sql : $cluster_select_sql
\$line_tmpl : $line_tmpl
\$glbl_tmpl : $glbl_tmpl
start node : $hash->{START_NODE}
end node : $hash->{END_NODE}
excluded node : @xluded
DB file (If specified) : $hash->{DB_FILE}
END
    for my $debug_line (split(/\r?\n/, $debug_str)) {
      print STDERR qq|# $debug_line \n|;
    }
    print STDERR $/;
  }
}


sub error{
  my $error_type = shift;
  my $additional_message = shift | '';
  my $tmpl;
  if (!defined $error_type) {
    $tmpl = q|Undefined|;
  } elsif ($error_type == 1) { # inconsistent
    $tmpl = q|Inconsistent|;
  } elsif ($error_type == 2) { # notfound
    $tmpl = q|NOTFOUND|;
  } elsif ($error_type == 3) { # invalid
    $tmpl = q|INVALID|;
  } else {
    $tmpl = q|Unknown|;
  }

  printf STDERR q|!!! ERROR !!! %s : %s|, $tmpl, $additional_message, $/;
  exit(1);
}

# Expand node information from sql response.
# each column is separated with '|', and an expanded variable is blank string if the column is blank.
sub get_nodeinfo {
  my $line = shift;
  chomp $line;
  my ($name, $inst_mac, $inst_netmask, $inst_addr, $storage_type, $arch) = split(/\|/, $line);
  return ($name, $inst_mac, $inst_netmask, $inst_addr, $storage_type, $arch);
}

# Check column fill except inst_mac column
sub check_nodeinfo {
  my ($name, $inst_mac, $inst_netmask, $inst_addr, $storage_type, $arch) = @_;
  error(undef, qq|Column not found|) if $name eq "";
  error(undef, qq|install_netmask for $name|) if $inst_netmask eq "";
  error(undef, qq|install_address for $name|) if $inst_addr eq "";
  error(undef, qq|storage_type for $name|) if $storage_type eq "";
  error(undef, qq|arch for $name|) if $arch eq "";
  return 1; # OK
}

sub sql_cmd {
  my $hash = shift;
  my $start_node = $hash->{START_NODE};
  my $end_node = $hash->{END_NODE};
  my $ldb_wc = $hash->{ldb_wc};
  my $db_file = $hash->{DB_FILE};
  $db_file = "--db=" . $db_file if ($db_file);
  my $suf = qq|bin/ldb $db_file sql|;
  $cluster_select_sql =~ s/'/\\'/;
  my $cmd = qq|$ldb_wc/$suf '$cluster_select_sql'|;
  $cmd =~ s/START_NODE/$start_node/;
  $cmd =~ s/END_NODE/$end_node/;
  # Check there is LDB
  error(2, "LDB") if (! -x qq|$ldb_wc/bin/ldb|);
  return $cmd;
}

sub node_lines {
  my $aref = shift;
  my $str = "";
  for my $line (@$aref) {
    $str .= $line;
  }
  return $str;
}

sub check_array_consistent {
  my $aref = shift;
  my $type = shift;
  my @s = sort @$aref;
  error(1, $type) if (defined $s[$#s] and $s[0] ne $s[$#s]);
  return 1;
}

# Check storage.conf's existence
# Return Path if everything is OK
sub check_storage {
  my $hash = shift;
  my $storage_type = shift; # Reference to the list of the names of storage.conf
  # File existence
  my $storage_conf_file_path = $hash->{storage_dir} . '/' . $storage_type;
  if (! -f qq|$storage_conf_file_path|) {
    error(2, qq|Storage configuration file ($storage_conf_file_path) not exists!|);
  }
  return $storage_conf_file_path;
}

sub check_arch {
  my $aref = shift;
  check_array_consistent($aref, 'arch');
  return 1;
}

sub check_secret_file {
  my $check_flg = shift;
  my $file = shift;
  if (!defined $check_flg and ! -f $file) {
    error(2, q|Secret file doesn't exist at | . $file);
  }
  return 1;
}

sub select_linux_kernel {
  my $arch = shift;
  if ($arch eq 'x86_64') {
    return q|linux-image-amd64|;
  } elsif ($arch eq 'i686') {
    return q|linux-image-686|;
  } else {
    error(2, "Linux Kernel " . $arch);
  }
}

sub select_kernel {
  my $arch = shift;
  my $linux_kernel = select_linux_kernel($arch);
  return $linux_kernel;
}

sub main {
  my $hash = shift;
  my @node_lines = ();
  my @mac_unknown = ();
  my @excluded = ();
  my @archs = ();
  my $handle = undef;
  # Create SQL Command
  open $handle, sql_cmd($hash) . " | " or die "Can't open L4 pipe";
  for my $line (<$handle>) {
    my $tmp_tmpl = $line_tmpl;
    my ($name, $inst_mac, $inst_netmask, $inst_addr, $storage_type, $arch) = get_nodeinfo($line);
    if (grep /$name/, @{$hash->{EXCLUDE_LIST}}) {
      push @excluded, $name;
      next;
    }
    check_nodeinfo($name, $inst_mac, $inst_netmask, $inst_addr, $storage_type, $arch);
    if ($inst_mac eq '') {
      push @mac_unknown, $name;
      next;
    }
    # Check storage configuration file
    my $storage_conf_path = check_storage($hash, $storage_type);
    # arch
    push @archs, $arch;
    # Replace Templates
    $tmp_tmpl =~ s/NODENAME/$name/;
    $tmp_tmpl =~ s/MAC/$inst_mac/;
    $tmp_tmpl =~ s/STORAGE_CONF/$storage_conf_path/;
    $tmp_tmpl =~ s/NETMASK/$inst_netmask/;
    $tmp_tmpl =~ s/IP_ADDRESS/$inst_addr/;
    $tmp_tmpl = qq|"$tmp_tmpl" \\\n|;
    push @node_lines, $tmp_tmpl;
  }
  close $handle;

  # Check architechture
  check_arch(\@archs);
  my $linux_kernel = select_kernel($archs[0]);

  # Disable break flag if multiple nodes are specified
  $hash->{break_option} = "" if (scalar(@node_lines) > 1);

  # OUTPUT
  my $nl = node_lines(\@node_lines);
  chomp $nl;
  $glbl_tmpl =~ s/LINE_TMPLS/$nl/;
  $glbl_tmpl =~ s/REMOTE_LDB_REPOSITORY_TYPE/$hash->{remote_ldb_repository_type}/;
  $glbl_tmpl =~ s/REMOTE_LDB_REPOSITORY_LOCATION/$hash->{remote_ldb_repository}/;
  $glbl_tmpl =~ s/SECRET_FILE/$hash->{secret_file}/;
  $glbl_tmpl =~ s/LINUX_KERNEL/$linux_kernel/;
  $glbl_tmpl =~ s/LUCIE_WC/$hash->{lucie_wc}/;
  $glbl_tmpl =~ s/BREAK_FLAG/$hash->{break_option}/;
  print $glbl_tmpl;

  if (@excluded != 0) {
    print qq|# Excluded List:\n|;
    print qq|# @excluded\n|;
  }
  if (@mac_unknown != 0) {
    print qq|# Unknown List:\n|;
    print qq|# @mac_unknown\n|;
  }

}

# Check Argv
sub check_argv{
  my %a = ();
  my ($_start_node, $_end_node) = undef;
  my $_db_file = undef;
  my $_help = undef;
  my $_debug = undef;
  my $_nocheck_secret_file = undef;
  my $_nobreak = undef;
  my $_secretfile = undef;
  my $_ldb_wc = undef;
  my $_lucie_wc = undef;
  my @_exclude;
  GetOptions(
             # Necessary Options
             "start-node=s" => \$_start_node,
             "end-node=s" => \$_end_node,
             # Sometimes Used options
             "exclude:s{,}" => \@_exclude,
             "ldb-wc:s" => \$_ldb_wc,
             "lucie-wc:s" => \$_lucie_wc,
             # Rarely used options
             "secret-file:s" => \$_secretfile,
             "nocheck-secret-file!" => \$_nocheck_secret_file,
             "nobreak!" => \$_nobreak,
             "help!" => \$_help,
             "db-file:s" => \$_db_file,
             "debug!" => \$_debug);
  if (defined $_help and $_help = 1) {
    usage();
    exit(0);
  }
  if (!defined $_start_node or !defined $_end_node) {
    usage();
    exit(0);
  }
  if (defined $_debug and $_debug = 1) {
    $DEBUG = 1;
  }
  # Lucie working copy
  $a{lucie_wc} = $default_lucie_wc;
  $a{lucie_wc} = $_lucie_wc if (defined $_lucie_wc);
  # Set secret file
  $a{secret_file} = $default_secret_file;
  $a{secret_file} = $_secretfile if(defined $_secretfile);
  check_secret_file($_nocheck_secret_file, $a{secret_file});
  # LDB working copy
  $a{ldb_wc} = $default_ldb_wc;
  $a{ldb_wc} = $_ldb_wc if (defined $_ldb_wc);
  # Storage conf directory
  my $storage_dir_suffix = q|/lucie/storage|;
  $a{storage_dir} = $a{ldb_wc} . $storage_dir_suffix;
  # Remote LDB repository
  $a{remote_ldb_repository} = $default_remote_ldb_repository;
  $a{remote_ldb_repository_type} = $default_remote_ldb_repository_type;
  # break flag
  $a{break_option} = $_nobreak? "" : "--break";
  # SQLite3 database file (if specified)
  my $db_file |= "";
  if ($db_file and ! -f $db_file) {
    error(2, $db_file);
  }
  
  $a{START_NODE} = $_start_node;
  $a{END_NODE} = $_end_node;
  $a{DB_FILE} = $db_file;
  $a{EXCLUDE_LIST} = \@_exclude;
  return \%a;
}

my $hash = check_argv();
print_debug_info($hash) if $DEBUG;
main($hash);
